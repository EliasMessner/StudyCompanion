# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - deploy

variables:
  GIT_DEPTH: 1
  BRANCH_NAME: "main"
  BOT_NAME: "ConfigUpdater"
  BOT_EMAIL: "config-bot@bot.io"
  COMMIT_MESSAGE: "[AUTOMATIC] Updated Kubernetes config file"

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  before_script:
  - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
  rules:
    - if: $CI_COMMIT_TAG

.update_config_file: &update_config_file |
  envsubst < ${CI_PROJECT_DIR}/iac/se4ai-chatbot-deployment.yaml > ${CI_PROJECT_DIR}/iac/se4ai-chatbot-deployment.yaml

.push_config_file: &push_config_file |
  git status
  lines=$(git status -s | wc -l)
  if [ $lines -gt 0 ];then
    echo "committing"
    git config --global user.name "${BOT_NAME}"
    git config --global user.email "${BOT_EMAIL}"
    git add .
    git commit -m "${COMMIT_MESSAGE} ${CI_RUNNER_ID}"
    echo "git push -o ci.skip 'https://{CI_REPOSITORY_TOKEN_RW}@${CI_REPOSITORY_URL#*@}' ${BRANCH_NAME}"
    git push -o ci.skip "https://${CI_REPOSITORY_TOKEN_RW}@${CI_REPOSITORY_URL#*@}" $BRANCH_NAME
  else
    echo "no change, nothing to commit"
  fi

update_image:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add bash git
    - git fetch
    - git checkout $BRANCH_NAME
    - cd $CI_PROJECT_DIR
  script:
    - *update_config_file
    - *push_config_file 
  rules:
    - if: $CI_COMMIT_TAG

apply_config_changes:
  stage: deploy
  image:
    name: bitnami/kubectl
    entrypoint: [""]
  before_script:
    - kubectl config set-cluster voyager --server=https://rancher.sws.informatik.uni-leipzig.de/k8s/clusters/c-m-brg24gnx
    - kubectl config set-credentials voyager --token=${BEARER_KEY}
    - kubectl config set-context voyager --cluster=voyager
    - kubectl config set-context voyager --user=voyager
    - kubectl config use-context voyager
  script:
    kubectl apply
      -f iac/se4ai-chatbot-deployment.yaml
      -f iac/se4ai-chatbot-service.yaml
      -f iac/se4ai-chatbot-ingress.yaml
  only:
    changes:
      - iac/*